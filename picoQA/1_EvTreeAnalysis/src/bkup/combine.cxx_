#include "count.h"

/* #include "MyLoop.h" */
/* #include "tree.h" */
#include "InputCombine.h"
#include "RunStats.h"
#include <assert.h>

#include <vector>
#include <array>
#include <map>
#include <set>
#include <typeinfo>
#include "TTree.h"

enum BrType { min, max, sum }; //note: sum2 and nEntries also sum their entries

struct BranchReader_Base {
    BranchReader_Base(BrType br);
    virtual void  fill() = 0;
    virtual void* return_ref() = 0;
    virtual void* return_leaf() =0;
    BrType        type;
    /* virtual string return_name() = 0; */
    virtual const type_info&  return_type() = 0;
    /* virtual ~BranchReader_Base() {}; */
};
BranchReader_Base::BranchReader_Base(BrType type_) :
    type{type_} 
{};

template <typename T>
struct BranchReader : public BranchReader_Base {
    void fill();
    void*  return_ref(); 
    void*  return_leaf();
    /* string return_name(); */
    const type_info& return_type();
    BranchReader(BrType);
    BranchReader(BrType, void*);
    /* BranchReader(const BranchReader& rhs); */
    /* string name; */
    /* BrType type; */
    bool   first_entry;
    T* leaf;
    T  value;
};

template <typename T>
BranchReader<T>::BranchReader(BrType type_) :
    BranchReader_Base{type_}, leaf{nullptr}, value{0}, first_entry{true}
{};

template <typename T>
BranchReader<T>::BranchReader(BrType type_, void* leaf_) :
    BranchReader_Base{type_}, leaf{static_cast<T*>(leaf_)}, value{0}, first_entry{true}
{};

/* template <typename T> */
/* BranchReader<T>::BranchReader(const BranchReader<T>& rhs) : */
/*     type{rhs.type}, leaf{rhs.leaf}, value{0}, first_entry{true} */
/* {}; */

template <typename T>
const type_info& BranchReader<T>::return_type() { 
    return typeid(T);
};

template <typename T>
void* BranchReader<T>::return_ref() { 
    return &value; 
}

template <typename T>
void* BranchReader<T>::return_leaf() { 
    return leaf; 
}


template <typename T>
void BranchReader<T>::fill() {
    switch(type){
        case BrType::min :
            if (first_entry) {
                first_entry = false;
                value = *leaf;
            } else if (*leaf < value) {
                value = *leaf;
            }
            break;
        case BrType::max :
            if (first_entry) {
                first_entry = false;
                value = *leaf;
            } else if (*leaf > value) {
                value = *leaf;
            }
            break;
        case BrType::sum :
            value += *leaf;
            break;
    }
};

void InputCombine::Combine() {
    cout << "starting inputcombine" << endl;
    
    // Get the branches from the TChain and 
    set<string> trigger_names;
    for (auto name : {"BBCMB", "BHT1_VPDMB_30", "BHT1_VPDMB_30_nobsmd",
        "BHT2_BBCMB", "FMS_JP2", "FMS_JP1", "VPDMB_30", "ZEROBIAS"}
    ) trigger_names.insert(name);

    TObjArray* branches = chain->GetListOfBranches();

    vector<BranchReader_Base*> vbranch(branches->GetEntries());
    vector<string>             vbr_names{};
    Int_t runId;
    int i_vb{0};

    for (int i{0}; i<branches->GetEntries();++i){
        TBranch *br =dynamic_cast<TBranch*>(branches->At(i));
        string name{br->GetName()};
        cout << "Found branch: " << name << endl;

        if (name == "runId") {
            chain->SetBranchAddress(name.c_str(), &runId);
        } else if ( trigger_names.count(name) ) {
            cout << " ------------ TRIGGER -----:: " << name << endl;
            vbranch[i_vb] = new BranchReader<Int_t>{BrType::sum};
            chain->SetBranchAddress(name.c_str(), vbranch[i_vb]->return_ref());
            vbr_names.push_back(name);
            ++i_vb;
        } else if ( name.find("_min") != string::npos ) {
            vbranch[i_vb] = new BranchReader<Double_t>{BrType::min};
            chain->SetBranchAddress(name.c_str(), vbranch[i_vb]->return_ref());
            vbr_names.push_back(name);
            ++i_vb;
            ++i_vb;
        } else if ( name.find("_max") != string::npos ) {
            vbranch[i_vb] = new BranchReader<Double_t>{BrType::max};
            chain->SetBranchAddress(name.c_str(), vbranch[i_vb]->return_ref());
            vbr_names.push_back(name);
            ++i_vb;
            ++i_vb;
        } else if ( name.find("_sum") != string::npos ) {
            vbranch[i_vb] = new BranchReader<Double_t>{BrType::sum};
            chain->SetBranchAddress(name.c_str(), vbranch[i_vb]->return_ref());
            vbr_names.push_back(name);
            ++i_vb;
            ++i_vb;
        } else if ( name.find("_sum2") != string::npos ) {
            vbranch[i_vb] = new BranchReader<Double_t>{BrType::sum};
            chain->SetBranchAddress(name.c_str(), vbranch[i_vb]->return_ref());
            vbr_names.push_back(name);
            ++i_vb;
            ++i_vb;
        } else if ( name.find("_nEntries") != string::npos ) {
            vbranch[i_vb] = new BranchReader<Long64_t>{BrType::sum};
            chain->SetBranchAddress(name.c_str(), vbranch[i_vb]->return_ref());
            vbr_names.push_back(name);
            ++i_vb;
            /* if (typeid(int) == vbranch[i_vb]->return_type()) { */
                /* cout << "yes" << endl; */
            /* } else { */
                /* cout << "no " << endl; */
            /* } */
            ++i_vb;
        } else {
            cout << "We found something that we don't know what to do with!" << endl;
        }
    }
    cout << "a1"<<endl;
        cout << "!" <<vbranch.size() << endl;


    // make a new tree with new branches to write out
    string file_name {log_name};
    file_name.replace( file_name.find(".log"), 4, ".root");
    TFile* file_comb = new TFile(file_name.c_str(), "recreate");
    file_comb->cd();
    TTree* tree = new TTree("VarStats","Tree of General Run Characteristics");

    map <int, vector<BranchReader_Base*>> data;
    // fill the zero'th data

    cout << "a2"<<endl;
    Long64_t jentry{0};
    Long64_t nbytes = 0, nb = 0;
    while (true){
        nb = chain->GetEntry(jentry);   nbytes += nb;
        Long64_t ientry { chain->LoadTree(jentry) };
        if (ientry < 0) break;
        if (jentry % 500000 == 0) {
            f_log << " # finished " << jentry << " events" << endl;
            update_log();
        }

                cout << "!" <<vbranch.size() << endl;
                cout << "a3"<<endl;
        if (!data.count(runId)) {
                cout << "a4"<<endl;
            data[runId] = vector<BranchReader_Base*>(i_vb);
            for (int i{0}; i<i_vb; ++i) {
                cout << " i " << i << "   " << i_vb << "  " << vbr_names[i] << endl;
                if (typeid(Int_t) == vbranch[i]->return_type()) cout << "z0" << endl;
                else cout << "z0.0" << endl;
                if (typeid(Int_t) == vbranch[i]->return_type()) {
                    cout << "int" << endl;
                    data[runId][i] = new BranchReader<Int_t>{vbranch[i]->type, vbranch[i]->return_leaf()};
                } else if (typeid(Double_t) == vbranch[i]->return_type()) {
                    cout << "dub" << endl;
                    data[runId][i] = new BranchReader<Double_t>{vbranch[i]->type, vbranch[i]->return_leaf()};
                } else if (typeid(Long64_t) == vbranch[i]->return_type()) {
                    cout << "long" << endl;
                    data[runId][i] = new BranchReader<Long64_t>{vbranch[i]->type, vbranch[i]->return_leaf()};
                } else {
                    cout << "FATAL type error " << endl;
                }
            }
            /*         datatype( new BranchReader{ vbranch[i] }; */
    cout << "a6"<<endl;
        }
        for (auto& b : data[runId]) b->fill();

        if (jentry > 10) break;
        ++jentry;
    }

};
    
    
using namespace std;

struct test {
    int *i;
    int*   rint() { return i; }
    void*  rvoid() { return i; }
    test(
            static_cast
    

int main(int argc, const char** argv) {
    InputCombine input{argc, argv};
    input.Combine();
};

